###### SUBSTITUTIONS ######
substitutions:
  name: open-voice-pe
  friendly_name: "Open Voice PE"
  version: "1.0.0"
  api_encryption_key: !secret api_encryption_key_open_voice_pe
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wake_word_engine: "openWakeWord"

###### ESPHOME ######
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.2.0
  on_boot:
    priority: 375.0
    then:
      - logger.log: "Running Config Version: ${version}"
      - script.execute: control_leds
      - delay: 1s
      - switch.turn_on: internal_speaker_amp
      - if:
          condition:
            binary_sensor.is_on: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: true
      - wait_until: wifi.connected
      - wait_until: api.connected
      - if:
          condition:
            lambda: return id(voice_assistant_enabled_state);
          then:
            - voice_assistant.start:
                silence_detection: true
      - delay: 10min
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: control_leds

###### ESP32 ######
esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: 5.1.5
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: y
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: y
      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: y
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: y
      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: y
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: y

###### WIFI ######
wifi:
  id: wifi_id
  fast_connect: false
  on_connect:
    then:
      - lambda: |-
          id(improv_ble_in_progress) = false;
      - script.execute:
          id: control_leds
  on_disconnect:
    then:
      - script.execute:
          id: control_leds
  domain: .local
  reboot_timeout: 15min
  power_save_mode: LIGHT
  enable_btm: false
  enable_rrm: false
  passive_scan: false
  enable_on_boot: true
  networks:
    - ssid: ${wifi_ssid}
      password: ${wifi_password}
      priority: 0.0
  use_address: ${name}.local

###### LOGGER ######
logger:
  level: VERBOSE
  logs:
    sensor: WARN
  baud_rate: 115200
  hardware_uart: USB_SERIAL_JTAG

###### API ######
api:
  id: api_id
  on_client_connected:
    then:
      - script.execute:
          id: control_leds
  on_client_disconnected:
    then:
      - script.execute:
          id: control_leds
  encryption:
    key: ${api_encryption_key}
  port: 6053
  password: ''
  reboot_timeout: 15min

###### OTA ######
ota:
  - platform: esphome
    id: ota_esphome
    version: 2
    port: 3232

###### I2C ######
i2c:
  id: internal_i2c
  sda: 5
  scl: 6
  frequency: 400kHz
  scan: true

###### PSRAM ######
psram:
  mode: octal
  speed: 80MHz

###### GLOBALS ######
globals:
  - id: global_led_animation_index
    type: int
    initial_value: '0'
  - id: init_in_progress
    type: bool
    initial_value: 'true'
  - id: improv_ble_in_progress
    type: bool
    initial_value: 'false'
  - id: voice_assistant_phase
    type: int
    initial_value: '10'
  - id: dial_touched
    type: bool
    initial_value: 'false'
  - id: color_changed
    type: bool
    initial_value: 'false'
  - id: jack_plugged_recently
    type: bool
    initial_value: 'false'
  - id: jack_unplugged_recently
    type: bool
    initial_value: 'false'
  - id: first_active_timer
    type: voice_assistant::Timer
  - id: is_timer_active
    type: bool
  - id: factory_reset_requested
    type: bool
    initial_value: 'false'
  - id: stop_enabled
    type: bool
    initial_value: 'false'
  - id: wake_word_engine
    type: std::string
    restore_value: true
    initial_value: '"openWakeWord"'
  - id: assist_just_started
    type: bool
    initial_value: 'false'
  - id: tts_target_media_player
    type: std::string
    restore_value: true
    initial_value: '"media_player.none"'
  - id: voice_assistant_enabled_state
    type: bool
    restore_value: true
    initial_value: 'true'

###### SELECT ######
select:
  - platform: template
    name: "TTS target media player"
    id: tts_target_media_player_select
    options:
      - "media_player.home_assistant_voice_09d508_media_player"
      - "media_player.vlc_telnet"
      - "media_player.woonkamer_2"
      - "media_player.chromecast8906"
    restore_value: true
    entity_category: config
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(tts_target_media_player) = x;
        - logger.log:
            format: "TTS target media player set to: %s"
            args: [ x.c_str() ]
            level: DEBUG
        - globals.set:
            id: tts_target_media_player
            value: !lambda return x;

###### SWITCH ######
switch:
  - platform: template
    id: master_mute_switch
    name: Mute
    icon: mdi:microphone-off
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_on: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: true
    turn_off_action:
      - if:
          condition:
            binary_sensor.is_off: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: false
    on_turn_on:
      - script.execute: control_leds
    on_turn_off:
      - script.execute: control_leds

  - platform: template
    id: wake_sound
    name: Wake sound
    icon: mdi:bullhorn
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: timer_ringing
    name: timer ringing
    internal: true
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0s
      - switch.turn_on: stop
      - script.execute: ring_timer
      - script.execute: control_leds
      - delay: 15min
      - switch.turn_off: timer_ringing
    on_turn_off:
      - switch.turn_off: stop
      - script.execute: disable_repeat
      - if:
          condition:
            media_player.is_announcing
          then:
            - media_player.stop:
                announcement: true
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1s
      - script.execute: control_leds

  - platform: template
    id: stop
    internal: true
    restore_mode: ALWAYS_OFF
    disabled_by_default: true
    turn_on_action:
      - lambda: id(stop_enabled) = true;
      - if:
          condition:
            voice_assistant.is_running
          then:
            - voice_assistant.stop
    turn_off_action:
      - lambda: id(stop_enabled) = false;

  - platform: template
    id: voice_assistant_enabled
    name: Voice Assistant Enabled
    icon: mdi:ear-hearing
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - lambda: id(voice_assistant_enabled_state) = true;
      - voice_assistant.start:
          silence_detection: true
    turn_off_action:
      - lambda: id(voice_assistant_enabled_state) = false;
      - voice_assistant.stop

  - platform: gpio
    id: internal_speaker_amp
    name: internal speaker amp
    entity_category: config
    internal: true
    pin:
      number: 47
      mode: OUTPUT

###### BINARY_SENSOR ######
binary_sensor:
  - platform: gpio
    id: center_button
    name: center_button
    internal: true
    pin:
      number: 0
      mode: INPUT
      inverted: true
    on_press:
      - script.execute: control_leds
      - if:
          condition:
            voice_assistant.is_running
          then:
            - lambda: id(assist_just_started) = true;
            - voice_assistant.start_continuous
            - if:
                condition:
                  switch.is_on: wake_sound
                then:
                  - script.execute:
                      id: play_sound
                      priority: false
                      sound_file: !lambda return id(wake_word_triggered_sound);
          else:
            - lambda: id(assist_just_started) = true;
            - voice_assistant.start:
                silence_detection: true
            - if:
                condition:
                  switch.is_on: wake_sound
                then:
                  - script.execute:
                      id: play_sound
                      priority: false
                      sound_file: !lambda return id(wake_word_triggered_sound);
    on_release:
      - script.execute: control_leds
      - if:
          condition:
            and:
              - voice_assistant.is_running
              - lambda: return id(voice_assistant_phase) >= 3 && !id(assist_just_started);
          then:
            - voice_assistant.stop
      - if:
          condition:
            lambda: return id(factory_reset_requested);
          then:
            - button.press: factory_reset_button
    on_multi_click:
      - timing:
          - ON for 0ms to 1s
          - OFF for at least 250ms
        then:
          - if:
              condition:
                lambda: return !id(init_in_progress) && !id(color_changed);
              then:
                - if:
                    condition:
                      switch.is_on: timer_ringing
                    then:
                      - switch.turn_off: timer_ringing
                    else:
                      - if:
                          condition:
                            media_player.is_announcing
                          then:
                            - media_player.stop:
                                announcement: true
                          else:
                            - if:
                                condition:
                                  voice_assistant.is_running
                                then:
                                  - voice_assistant.stop
                                else:
                                  - if:
                                      condition:
                                        media_player.is_playing
                                      then:
                                        - media_player.pause:
                                            announcement: false
                                      else:
                                        - script.execute:
                                            id: play_sound
                                            priority: true
                                            sound_file: !lambda return id(center_button_press_sound);
        invalid_cooldown: 1s
      - timing:
          - ON for 0ms to 1s
          - OFF for 0ms to 250ms
          - ON for 0ms to 1s
          - OFF for at least 250ms
        then:
          - if:
              condition:
                lambda: return !id(init_in_progress) && !id(color_changed);
              then:
                - script.execute:
                    id: play_sound
                    priority: false
                    sound_file: !lambda return id(center_button_double_press_sound);
                - event.trigger:
                    id: button_press_event
                    event_type: double_press
        invalid_cooldown: 1s
      - timing:
          - ON for 0ms to 1s
          - OFF for 0ms to 250ms
          - ON for 0ms to 1s
          - OFF for 0ms to 250ms
          - ON for 0ms to 1s
          - OFF for at least 250ms
        then:
          - if:
              condition:
                lambda: return !id(init_in_progress) && !id(color_changed);
              then:
                - script.execute:
                    id: play_sound
                    priority: false
                    sound_file: !lambda return id(center_button_triple_press_sound);
                - event.trigger:
                    id: button_press_event
                    event_type: triple_press
        invalid_cooldown: 1s
      - timing:
          - ON for at least 1s
        then:
          - if:
              condition:
                lambda: return !id(init_in_progress) && !id(color_changed);
              then:
                - script.execute:
                    id: play_sound
                    priority: false
                    sound_file: !lambda return id(center_button_long_press_sound);
                - light.turn_off:
                    id: voice_assistant_leds
                    state: false
                - event.trigger:
                    id: button_press_event
                    event_type: long_press
        invalid_cooldown: 1s
      - timing:
          - ON for 0ms to 200ms
          - OFF for 0s to 2s
          - ON for 0ms to 200ms
          - OFF for 0s to 2s
          - ON for 0ms to 200ms
          - OFF for 0s to 2s
          - ON for 0ms to 200ms
          - OFF for 500ms to 2s
          - ON for 0ms to 200ms
          - OFF for 0s to 2s
          - ON for 200ms to 2s
        then:
          - if:
              condition:
                lambda: return !id(init_in_progress);
              then:
                - light.turn_on:
                    id: voice_assistant_leds
                    brightness: 1.0
                    effect: Tick
                    state: true
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(easter_egg_tick_sound);
                - delay: 4s
                - light.turn_off:
                    id: voice_assistant_leds
                    state: false
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(easter_egg_tada_sound);
                - light.turn_on:
                    id: voice_assistant_leds
                    brightness: 1.0
                    effect: Rainbow
                    state: true
                - event.trigger:
                    id: button_press_event
                    event_type: easter_egg_press
        invalid_cooldown: 1s
      - timing:
          - ON for at least 10s
        then:
          - if:
              condition:
                lambda: return !id(dial_touched);
              then:
                - light.turn_on:
                    id: voice_assistant_leds
                    brightness: 1.0
                    effect: Factory Reset Coming Up
                    state: true
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(factory_reset_initiated_sound);
                - wait_until:
                    binary_sensor.is_off: center_button
                - if:
                    condition:
                      lambda: return !id(factory_reset_requested);
                    then:
                      - light.turn_off:
                          id: voice_assistant_leds
                          state: false
                      - script.execute:
                          id: play_sound
                          priority: true
                          sound_file: !lambda return id(factory_reset_cancelled_sound);
        invalid_cooldown: 1s
      - timing:
          - ON for at least 22s
        then:
          - if:
              condition:
                lambda: return !id(dial_touched);
              then:
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(factory_reset_confirmed_sound);
                - light.turn_on:
                    id: voice_assistant_leds
                    brightness: 1.0
                    red: 1.0
                    green: 0.0
                    blue: 0.0
                    effect: none
                    state: true
                - lambda: id(factory_reset_requested) = true;
        invalid_cooldown: 1s

  - platform: gpio
    id: hardware_mute_switch
    name: hardware_mute_switch
    internal: true
    pin:
      number: 3
      mode: INPUT
    on_press:
      - logger.log:
          format: "Mute switch pressed"
          level: DEBUG
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda return id(mute_switch_on_sound);
      - switch.template.publish:
          id: master_mute_switch
          state: true
    on_release:
      - logger.log:
          format: "Mute switch released"
          level: DEBUG
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda return id(mute_switch_off_sound);
      - switch.template.publish:
          id: master_mute_switch
          state: false

  - platform: gpio
    id: jack_plugged
    name: jack_plugged
    internal: true
    pin:
      number: 17
      mode: INPUT
    filters:
      - delayed_on: 200ms
      - delayed_off: 200ms
    on_press:
      - lambda: id(jack_plugged_recently) = true;
      - script.execute: control_leds
      - delay: 200ms
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda return id(jack_connected_sound);
      - delay: 800ms
      - lambda: id(jack_plugged_recently) = false;
      - script.execute: control_leds
    on_release:
      - lambda: id(jack_unplugged_recently) = true;
      - script.execute: control_leds
      - delay: 200ms
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda return id(jack_disconnected_sound);
      - delay: 800ms
      - lambda: id(jack_unplugged_recently) = false;
      - script.execute: control_leds

###### LIGHT ######
light:
  - platform: esp32_rmt_led_strip
    id: leds_internal
    name: leds_internal
    internal: true
    pin: 21
    chipset: WS2812
    num_leds: 12
    rgb_order: GRB
    rmt_symbols: 192
    max_refresh_rate: 15ms
    power_supply: led_power
    restore_mode: ALWAYS_OFF
    gamma_correct: 2.8
    use_psram: true

  - platform: partition
    id: voice_assistant_leds
    name: voice_assistant_leds
    internal: true
    restore_mode: ALWAYS_OFF
    gamma_correct: 2.8
    segments:
      - id: leds_internal
        from: 7
        to: 11
      - id: leds_internal
        from: 0
        to: 6
    effects:
      - addressable_lambda:
          name: Waiting for Command
          update_interval: 100ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 11) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 10) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 5) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 4) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
            id(global_led_animation_index) = (id(global_led_animation_index) + 1) % 12;
      - addressable_lambda:
          name: Listening For Command
          update_interval: 50ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 11) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 10) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 5) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 4) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
            id(global_led_animation_index) = (id(global_led_animation_index) + 1) % 12;
      - addressable_lambda:
          name: Thinking
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color * uint8_t(255/brightness_step_number*(brightness_step_number-brightness_step));
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color * uint8_t(255/brightness_step_number*(brightness_step_number-brightness_step));
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: Replying
          update_interval: 50ms
          lambda: |-
            id(global_led_animation_index) = (12 + id(global_led_animation_index) - 1) % 12;
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 1) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 2) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 7) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 8) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
      - addressable_lambda:
          name: Muted or Silent
          update_interval: 16ms
          lambda: |-
            static int8_t index = 0;
            Color muted_color(255, 0, 0);
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (light_color.get_state()) {
                it[i] = color;
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (id(master_mute_switch).state) {
              it[2] = Color::BLACK;
              it[3] = muted_color;
              it[4] = Color::BLACK;
              it[8] = Color::BLACK;
              it[9] = muted_color;
              it[10] = Color::BLACK;
            }
            if (id(external_media_player).volume == 0.0f || id(external_media_player).is_muted()) {
              it[5] = Color::BLACK;
              it[6] = muted_color;
              it[7] = Color::BLACK;
            }
      - addressable_lambda:
          name: Volume Display
          update_interval: 50ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            Color silenced_color(255, 0, 0);
            auto volume_ratio = 12.0f * id(external_media_player).volume;
            for (int i = 0; i < 12; i++) {
              if (i <= volume_ratio) {
                it[(6+i)%12] = color * min(255.0f * (volume_ratio - i), 255.0f);
              } else {
                it[(6+i)%12] = Color::BLACK;
              }
            }
            if (id(external_media_player).volume == 0.0f) {
              it[6] = silenced_color;
            }
      - addressable_lambda:
          name: Center Button Touched
          update_interval: 16ms
          lambda: |-
            if (initial_run) {
              auto led_ring_cv = id(led_ring).current_values;
              auto va_leds_call = id(voice_assistant_leds).make_call();
              va_leds_call.from_light_color_values(led_ring_cv);
              va_leds_call.set_brightness(min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f));
              va_leds_call.set_state(true);
              va_leds_call.perform();
            }
            auto light_color = id(voice_assistant_leds).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              it[i] = color;
            }
      - addressable_twinkle:
          name: Twinkle
          twinkle_probability: 0.5
          progress_interval: 4ms
      - addressable_lambda:
          name: Error
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            Color error_color(255, 0, 0);
            for (int i = 0; i < 12; i++) {
              it[i] = error_color * uint8_t(255/brightness_step_number*(brightness_step_number-brightness_step));
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: Timer Ring
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            Color muted_color(255, 0, 0);
            for (int i = 0; i < 12; i++) {
              it[i] = color * uint8_t(255/brightness_step_number*(brightness_step_number-brightness_step));
            }
            if (id(master_mute_switch).state) {
              it[3] = muted_color;
              it[9] = muted_color;
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: Timer Tick
          update_interval: 100ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            Color muted_color(255, 0, 0);
            auto timer_ratio = 12.0f * id(first_active_timer).seconds_left / max(id(first_active_timer).total_seconds, (uint32_t)1);
            uint8_t last_led_on = static_cast<uint8_t>(ceil(timer_ratio)) - 1;
            for (int i = 0; i < 12; i++) {
              float brightness_dip = (i == id(global_led_animation_index) % 12 && i != last_led_on) ? 0.9f : 1.0f;
              if (i <= timer_ratio) {
                it[i] = color * min(255.0f * brightness_dip * (timer_ratio - i), 255.0f * brightness_dip);
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (id(master_mute_switch).state) {
              it[2] = Color::BLACK;
              it[3] = muted_color;
              it[4] = Color::BLACK;
              it[8] = Color::BLACK;
              it[9] = muted_color;
              it[10] = Color::BLACK;
            }
            id(global_led_animation_index) = (12 + id(global_led_animation_index) - 1) % 12;
      - addressable_rainbow:
          name: Rainbow
          width: 12
          speed: 10
      - addressable_lambda:
          name: Tick
          update_interval: 333ms
          lambda: |-
            static uint8_t index = 0;
            Color color(255, 0, 0);
            if (initial_run) {
              index = 0;
            }
            for (int i = 0; i < 12; i++) {
              if (i <= index) {
                it[i] = Color::BLACK;
              } else {
                it[i] = color;
              }
            }
            index = (index + 1) % 12;
      - addressable_lambda:
          name: Factory Reset Coming Up
          update_interval: 1s
          lambda: |-
            static uint8_t index = 0;
            Color color(255, 0, 0);
            if (initial_run) {
              index = 0;
            }
            for (int i = 0; i < 12; i++) {
              if (i <= index) {
                it[i] = color;
              } else {
                it[i] = Color::BLACK;
              }
            }
            index = (index + 1) % 12;
      - addressable_lambda:
          name: Jack Plugged
          update_interval: 40ms
          lambda: |-
            static uint8_t index = 0;
            if (initial_run) {
              index = 0;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            if (index <= 6) {
              for (int i = 0; i < 12; i++) {
                if (i == index) {
                  it[i] = color;
                } else if (i == (12 - index) % 12) {
                  it[i] = color;
                } else {
                  it[i] = Color::BLACK;
                }
              }
            }
            index = (index + 1);
      - addressable_lambda:
          name: Jack Unplugged
          update_interval: 40ms
          lambda: |-
            static uint8_t index = 0;
            if (initial_run) {
              index = 0;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255, light_color.get_green() * 255,
                  light_color.get_blue() * 255);
            if (index <= 6) {
              for (int i = 0; i < 12; i++) {
                if (i == 6 - index) {
                  it[i] = color;
                } else if (i == (6 + index) % 12) {
                  it[i] = color;
                } else {
                  it[i] = Color::BLACK;
                }
              }
            }
            index = (index + 1);

  - platform: partition
    id: led_ring
    name: LED Ring
    entity_category: config
    icon: mdi:circle-outline
    restore_mode: RESTORE_DEFAULT_OFF
    gamma_correct: 2.8
    initial_state:
      color_mode: RGB
      brightness: 0.66
      red: 0.094
      green: 0.733
      blue: 0.949
    segments:
      - id: leds_internal
        from: 7
        to: 11
      - id: leds_internal
        from: 0
        to: 6

###### POWER_SUPPLY ######
power_supply:
  - id: led_power
    pin:
      number: 45
      mode: OUTPUT
    enable_time: 20ms
    keep_on_time: 30s

###### SENSOR ######
sensor:
  - platform: rotary_encoder
    id: dial
    name: dial
    internal: true
    pin_a:
      number: 16
      mode: INPUT
    pin_b:
      number: 18
      mode: INPUT
    resolution: 2
    unit_of_measurement: steps
    icon: mdi:rotate-right
    accuracy_decimals: 0
    restore_mode: RESTORE_DEFAULT_ZERO
    on_clockwise:
      - lambda: id(dial_touched) = true;
      - if:
          condition:
            binary_sensor.is_off: center_button
          then:
            - script.execute:
                id: control_volume
                increase_volume: true
          else:
            - script.execute:
                id: control_hue
                increase_hue: true
    on_anticlockwise:
      - lambda: id(dial_touched) = true;
      - if:
          condition:
            binary_sensor.is_off: center_button
          then:
            - script.execute:
                id: control_volume
                increase_volume: false
          else:
            - script.execute:
                id: control_hue
                increase_hue: false

###### EVENT ######
event:
  - platform: template
    id: button_press_event
    name: Button press
    icon: mdi:button-pointer
    device_class: button
    event_types:
      - double_press
      - triple_press
      - long_press
      - easter_egg_press

###### SCRIPT ######
script:
  - id: control_leds
    mode: single
    then:
      - lambda: |-
          id(check_if_timers_active).execute();
          if (id(is_timer_active)) id(fetch_first_active_timer).execute();
          if (id(improv_ble_in_progress)) id(control_leds_improv_ble_state).execute();
          else if (id(init_in_progress)) id(control_leds_init_state).execute();
          else if (!id(wifi_id).is_connected() || !id(api_id).is_connected()) id(control_leds_no_ha_connection_state).execute();
          else if (id(center_button).state) id(control_leds_center_button_touched).execute();
          else if (id(jack_plugged_recently)) id(control_leds_jack_plugged_recently).execute();
          else if (id(jack_unplugged_recently)) id(control_leds_jack_unplugged_recently).execute();
          else if (id(dial_touched)) id(control_leds_dial_touched).execute();
          else if (id(timer_ringing).state) id(control_leds_timer_ringing).execute();
          else if (id(voice_assistant_phase) == 2) id(control_leds_voice_assistant_waiting_for_command_phase).execute();
          else if (id(voice_assistant_phase) == 3) id(control_leds_voice_assistant_listening_for_command_phase).execute();
          else if (id(voice_assistant_phase) == 4) id(control_leds_voice_assistant_thinking_phase).execute();
          else if (id(voice_assistant_phase) == 5) id(control_leds_voice_assistant_replying_phase).execute();
          else if (id(voice_assistant_phase) == 11) id(control_leds_voice_assistant_error_phase).execute();
          else if (id(voice_assistant_phase) == 10) id(control_leds_voice_assistant_not_ready_phase).execute();
          else if (id(is_timer_active)) id(control_leds_timer_ticking).execute();
          else if (id(master_mute_switch).state) id(control_leds_muted_or_silent).execute();
          else if (id(external_media_player).volume == 0.0f || id(external_media_player).is_muted()) id(control_leds_muted_or_silent).execute();
          else if (id(voice_assistant_phase) == 1) id(control_leds_voice_assistant_idle_phase).execute();

  - id: control_leds_improv_ble_state
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: 0.66
          red: 1.0
          green: 0.89
          blue: 0.71
          effect: Twinkle
          state: true

  - id: control_leds_init_state
    mode: single
    then:
      - if:
          condition:
            wifi.connected
          then:
            - light.turn_on:
                id: voice_assistant_leds
                brightness: 0.66
                red: 0.094
                green: 0.733
                blue: 0.949
                effect: Twinkle
                state: true
          else:
            - light.turn_on:
                id: voice_assistant_leds
                brightness: 0.66
                red: 1.0
                green: 0.89
                blue: 0.71
                effect: none
                state: true

  - id: control_leds_no_ha_connection_state
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: 0.66
          red: 1.0
          green: 0.0
          blue: 0.0
          effect: Twinkle
          state: true

  - id: control_leds_voice_assistant_idle_phase
    mode: single
    then:
      - light.turn_off:
          id: voice_assistant_leds
          state: false
      - if:
          condition:
            light.is_on: led_ring
          then:
            - light.turn_on:
                id: led_ring
                state: true

  - id: control_leds_voice_assistant_waiting_for_command_phase
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Waiting for Command
          state: true

  - id: control_leds_voice_assistant_listening_for_command_phase
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Listening For Command
          state: true

  - id: control_leds_voice_assistant_thinking_phase
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Thinking
          state: true

  - id: control_leds_voice_assistant_replying_phase
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Replying
          state: true

  - id: control_leds_voice_assistant_error_phase
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f);
          red: 1.0
          green: 0.0
          blue: 0.0
          effect: Error
          state: true

  - id: control_leds_muted_or_silent
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Muted or Silent
          state: true

  - id: control_leds_voice_assistant_not_ready_phase
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: 0.66
          red: 1.0
          green: 0.0
          blue: 0.0
          effect: Twinkle
          state: true

  - id: control_leds_dial_touched
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Volume Display
          state: true

  - id: control_leds_jack_unplugged_recently
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Jack Unplugged
          state: true

  - id: control_leds_jack_plugged_recently
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Jack Plugged
          state: true

  - id: control_leds_center_button_touched
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f);
          effect: Center Button Touched
          state: true

  - id: control_leds_timer_ringing
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f);
          effect: Timer Ring
          state: true

  - id: control_leds_timer_ticking
    mode: single
    then:
      - light.turn_on:
          id: voice_assistant_leds
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          effect: Timer Tick
          state: true

  - id: control_volume
    mode: restart
    parameters:
      increase_volume: bool
    then:
      - delay: 16ms
      - if:
          condition:
            lambda: return increase_volume;
          then:
            - media_player.volume_up:
                id: external_media_player
                announcement: false
          else:
            - media_player.volume_down:
                id: external_media_player
                announcement: false
      - script.execute: control_leds
      - delay: 1s
      - lambda: id(dial_touched) = false;
      - sensor.rotary_encoder.set_value:
          id: dial
          value: 0
      - script.execute: control_leds

  - id: control_hue
    mode: restart
    parameters:
      increase_hue: bool
    then:
      - delay: 16ms
      - if:
          condition:
            lambda: return abs(int(id(dial).state)) > 3 || id(color_changed);
          then:
            - lambda: |-
                id(color_changed) = true;
                auto light_color = id(voice_assistant_leds).current_values;
                int hue = 0;
                float saturation = 0, value = 0;
                rgb_to_hsv(light_color.get_red(), light_color.get_green(), light_color.get_blue(), hue, saturation, value);
                if (increase_hue) hue = (hue + 10) % 360;
                else hue = (hue + 350) % 360;
                if (saturation < 0.05) saturation = 1;
                float red = 0, green = 0, blue = 0;
                hsv_to_rgb(hue, saturation, value, red, green, blue);
                id(voice_assistant_leds).make_call().set_rgb(red, green, blue).perform();
      - wait_until:
          binary_sensor.is_off: center_button
      - lambda: |-
          id(dial_touched) = false;
          auto led_ring_call = id(led_ring).make_call();
          auto va_leds_cv = id(voice_assistant_leds).current_values;
          led_ring_call.from_light_color_values(va_leds_cv);
          led_ring_call.set_brightness(id(led_ring).current_values.get_brightness());
          led_ring_call.set_state(id(led_ring).current_values.is_on());
          led_ring_call.perform();
      - sensor.rotary_encoder.set_value:
          id: dial
          value: 0
      - script.execute: control_leds
      - delay: 500ms
      - lambda: id(color_changed) = false;

  - id: ring_timer
    mode: single
    then:
      - script.execute: enable_repeat_one
      - script.execute:
          id: play_sound
          priority: true
          sound_file: !lambda return id(timer_finished_sound);

  - id: enable_repeat_one
    mode: single
    then:
      - lambda: |-
          id(external_media_player)->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
            .set_announcement(true)
            .perform();
          id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 500);

  - id: disable_repeat
    mode: single
    then:
      - lambda: |-
          id(external_media_player)->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
            .set_announcement(true)
            .perform();
          id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);

  - id: play_sound
    mode: single
    parameters:
      priority: bool
      sound_file: audio::AudioFile*
    then:
      - lambda: |-
          if (priority) {
            id(external_media_player)->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ((id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING) || priority) {
            id(external_media_player)->play_file(sound_file, true, false);
          }

  - id: fetch_first_active_timer
    mode: single
    then:
      - lambda: |-
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(first_active_timer) = output_timer;

  - id: check_if_timers_active
    mode: single
    then:
      - lambda: |-
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if (iterable_timer.second.is_active) output = true;
            }
          }
          id(is_timer_active) = output;

  - id: activate_stop_word_if_tts_step_is_long
    mode: single
    then:
      - delay: 1s
      - switch.turn_on: stop

###### I2S_AUDIO ######
i2s_audio:
  - id: i2s_output
    i2s_lrclk_pin: 7
    i2s_bclk_pin: 8
  - id: i2s_input
    i2s_lrclk_pin: 14
    i2s_bclk_pin: 13

###### EXTERNAL_COMPONENTS ######
external_components:
  - source:
      type: git
      url: https://github.com/esphome/home-assistant-voice-pe
      ref: dev
    components:
      - voice_kit
    refresh: 0s

###### MICROPHONE ######
microphone:
  - platform: nabu_microphone
    i2s_din_pin: 15
    sample_rate: 16000
    bits_per_sample: 32bit
    i2s_mode: secondary
    i2s_audio_id: i2s_input
    adc_type: external
    pdm: false
    channel_0:
      id: asr_mic
    channel_1:
      id: comm_mic
      amplify_shift: 2

###### SPEAKER ######
speaker:
  - platform: i2s_audio
    id: i2s_audio_speaker
    i2s_dout_pin: 10
    i2s_audio_id: i2s_output
    sample_rate: 48000
    bits_per_sample: 32bit
    i2s_mode: secondary
    channel: stereo
    buffer_duration: 100ms
    timeout: never
    audio_dac: aic3204_dac
    dac_type: external
    num_channels: 2
  - platform: mixer
    id: mixing_speaker
    output_speaker: i2s_audio_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        sample_rate: 48000
        bits_per_sample: 16
        num_channels: 2
        buffer_duration: 100ms
        timeout: never
      - id: media_mixing_input
        sample_rate: 48000
        bits_per_sample: 16
        num_channels: 2
        buffer_duration: 100ms
        timeout: never
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
    num_channels: 2
    buffer_duration: 100ms
    filters: 16
    taps: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
    num_channels: 2
    buffer_duration: 100ms
    filters: 16
    taps: 16

###### MEDIA_PLAYER ######
media_player:
  - platform: speaker
    id: external_media_player
    name: Media Player
    internal: false
    volume_increment: 0.05
    volume_min: 0.4
    volume_max: 0.85
    buffer_size: 1000000
    codec_support_enabled: true
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: WAV
      num_channels: 1
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: WAV
      num_channels: 2
      sample_rate: 48000
    on_mute:
      - script.execute: control_leds
    on_unmute:
      - script.execute: control_leds
    on_volume:
      - script.execute: control_leds
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0s
    on_state:
      - if:
          condition:
            and:
              - switch.is_off: timer_ringing
              - not:
                  voice_assistant.is_running
              - not:
                  media_player.is_announcing
          then:
            - mixer_speaker.apply_ducking:
                id: media_mixing_input
                decibel_reduction: 0
                duration: 1s
    files:
      - id: center_button_press_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_press.flac
          type: web
      - id: center_button_double_press_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_double_press.flac
          type: web
      - id: center_button_triple_press_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_triple_press.flac
          type: web
      - id: center_button_long_press_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_long_press.flac
          type: web
      - id: factory_reset_initiated_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_initiated.mp3
          type: web
      - id: factory_reset_cancelled_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_cancelled.mp3
          type: web
      - id: factory_reset_confirmed_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_confirmed.mp3
          type: web
      - id: jack_connected_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/jack_connected.flac
          type: web
      - id: jack_disconnected_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/jack_disconnected.flac
          type: web
      - id: mute_switch_on_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_on.flac
          type: web
      - id: mute_switch_off_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_off.flac
          type: web
      - id: timer_finished_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
          type: web
      - id: wake_word_triggered_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac
          type: web
      - id: easter_egg_tick_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/easter_egg_tick.mp3
          type: web
      - id: easter_egg_tada_sound
        file:
          url: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/easter_egg_tada.mp3
          type: web

###### VOICE_KIT ######
voice_kit:
  i2c_id: internal_i2c
  reset_pin:
    number: 4
    mode: OUTPUT
  address: 0x42
  channel_0_stage: AGC
  channel_1_stage: NS
  firmware:
    url: https://github.com/esphome/voice-kit-xmos-firmware/releases/download/v1.3.1/ffva_v1.3.1_upgrade.bin
    version: 1.3.1
    md5: 964635c5bf125529dab14a2472a15401

###### AUDIO_DAC ######
audio_dac:
  - platform: aic3204
    id: aic3204_dac
    i2c_id: internal_i2c
    address: 0x18

###### VOICE_ASSISTANT ######
voice_assistant:
  id: va
  microphone: asr_mic
  use_wake_word: true
  noise_suppression_level: 0
  auto_gain: 0dBFS
  volume_multiplier: 1.0
  on_client_connected:
    - logger.log:
        format: "Wyoming satellite client connected"
        level: DEBUG
    - lambda: id(init_in_progress) = false;
    - lambda: id(voice_assistant_phase) = 1;
    - script.execute: control_leds
    - voice_assistant.start:
        silence_detection: true
  on_client_disconnected:
    - logger.log:
        format: "Wyoming satellite client disconnected"
        level: DEBUG
    - voice_assistant.stop
    - lambda: id(voice_assistant_phase) = 10;
    - script.execute: control_leds
    - delay: 1s
    - if:
        condition:
          lambda: return id(voice_assistant_enabled_state);
        then:
          - voice_assistant.start:
              silence_detection: true
  on_error:
    - logger.log:
        format: "Voice assistant error: %s"
        args: [code.c_str()]
        level: ERROR
    - if:
        condition:
          and:
            - lambda: return !id(init_in_progress);
            - lambda: return code != "duplicate_wake_up_detected";
            - lambda: return code != "stt-no-text-recognized";
            - lambda: return code != "no_wake_word";
        then:
          - lambda: id(voice_assistant_phase) = 11;
          - script.execute: control_leds
          - delay: 1s
          - voice_assistant.stop
          - lambda: id(voice_assistant_phase) = 1; id(assist_just_started) = false;
          - if:
              condition:
                lambda: return id(voice_assistant_enabled_state);
              then:
                - voice_assistant.start:
                    silence_detection: true
  on_start:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 20
        duration: 0s
  on_listening:
    - lambda: id(voice_assistant_phase) = 2;
    - script.execute: control_leds
    - logger.log:
        format: Streaming audio to Home Assistant
        level: DEBUG
        tag: main
  on_stt_vad_start:
    - lambda: id(voice_assistant_phase) = 3;
    - script.execute: control_leds
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = 4;
    - script.execute: control_leds
  on_tts_start:
    - lambda: id(voice_assistant_phase) = 5;
    - script.execute: control_leds
    - script.execute: activate_stop_word_if_tts_step_is_long
  on_tts_end:
    - logger.log:
        format: "TTS Target Media Player value: %s"
        args: [id(tts_target_media_player).c_str()]
        level: DEBUG
    - logger.log:
        format: "Condition result for remote playback: %d"
        args: [id(tts_target_media_player) != "media_player.none"]
        level: DEBUG
    - media_player.stop:
        id: external_media_player
        announcement: true
    - if:
        condition:
          lambda: return id(tts_target_media_player) != "media_player.none";
        then:
          - logger.log:
              format: "Routing TTS to remote media player: %s"
              args: [id(tts_target_media_player).c_str()]
              level: DEBUG
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: !lambda return id(tts_target_media_player);
                media_content_id: !lambda return x;
                media_content_type: music
                announce: "true"
          - logger.log:
              format: "Sent TTS to remote media player with URL"
              level: DEBUG
          - delay: 10s
          - logger.log:
              format: "Checking external playback success for %s"
              args: [id(tts_target_media_player).c_str()]
              level: DEBUG
          - if:
              condition:
                lambda: return false;  # Placeholder
              then:
                - logger.log:
                    format: "External playback failed for %s"
                    args: [id(tts_target_media_player).c_str()]
                    level: ERROR
          - voice_assistant.stop
          - delay: 1s
          - lambda: id(voice_assistant_phase) = 1; id(assist_just_started) = false;
        else:
          - logger.log:
              format: "Playing TTS locally on VPE"
              level: DEBUG
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: "media_player.external_media_player"
                media_content_id: !lambda return x;
                media_content_type: music
                announce: "true"
          - logger.log:
              format: "Sent TTS to local media player"
              level: DEBUG
    - delay: 1s
  on_end:
    - wait_until:
        not:
          voice_assistant.is_running
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1s
    - script.stop: activate_stop_word_if_tts_step_is_long
    - if:
        condition:
          switch.is_off: timer_ringing
        then:
          - switch.turn_off: stop
    - if:
        condition:
          lambda: return id(voice_assistant_phase) == 11;
        then:
          - delay: 1s
    - lambda: id(voice_assistant_phase) = 1; id(assist_just_started) = false;
    - script.execute: control_leds
    - if:
        condition:
          lambda: return id(voice_assistant_enabled_state);
        then:
          - voice_assistant.start:
              silence_detection: true
  on_timer_finished:
    - switch.turn_on: timer_ringing
  on_timer_started:
    - script.execute: control_leds
  on_timer_cancelled:
    - script.execute: control_leds
  on_timer_updated:
    - script.execute: control_leds
  on_timer_tick:
    - script.execute: control_leds
  on_wake_word_detected:
    - if:
        condition:
          switch.is_on: wake_sound
        then:
          - script.execute:
              id: play_sound
              priority: false
              sound_file: !lambda return id(wake_word_triggered_sound);

###### BUTTON ######
button:
  - platform: factory_reset
    id: factory_reset_button
    name: Factory Reset
    entity_category: diagnostic
    internal: true
    icon: mdi:restart-alert
    device_class: restart
  - platform: restart
    id: restart_button
    name: Restart
    entity_category: config
    icon: mdi:restart
    device_class: restart
  - platform: template
    name: "Start Voice Assistant"
    on_press:
      - voice_assistant.start:
          silence_detection: true

###### DEBUG ######
debug:
  update_interval: 5s
